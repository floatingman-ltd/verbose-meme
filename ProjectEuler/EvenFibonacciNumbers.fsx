// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1,2,3,5,8,13,21,34,55,89,...
// By considering the terms in the Fibonacci sequence whose values do not exceed four
// million, find the sum of the even-valued terms.

//* brute force

// tail recursion
[<TailCall>]
let tail_fibonacci n =
  let rec loop acc1 acc2 n =
    match n with
    | 0L -> acc1
    | 1L -> acc2
    | _ -> loop acc2 (acc1 + acc2) (n - 1L)

  loop 0L 1L n

let isEven v = v % 2L = 0L

#time on
let brute_fib =
  Seq.initInfinite (fun i -> tail_fibonacci i)
  |> Seq.takeWhile (fun v -> v <= 4_000_000L)
  |> Seq.filter (fun v -> isEven v)
  |> Seq.sum
#time off

printfn "Brute force: %i" brute_fib